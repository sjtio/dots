# quit
super + x ; q
	bspc quit

# open a window on a new desktop
super + shift + space
	bspc desktop -f next.!occupied && runner

# open a window on a new desktop
super + ctrl + space
	bspwm_draw_cmd

# focus the given desktop (and search for renamed version if fail)
super + {q,w,e,r,t,y,u,i,o,p}
	x={q,w,e,r,t,y,u,i,o,p}; \
	bspc desktop -f "$x" || bspc desktop -f "$(bspc query -D --names | grep -m 1 "^$x·")"

# send window to the given desktop (and search for renamed version if fail)
super + shift + {q,w,e,r,t,y,u,i,o,p}
	x={q,w,e,r,t,y,u,i,o,p}; \
	bspc node -d "$x" || bspc node -d "$(bspc query -D --names | grep -m 1 "^$x·")"

# send window to the given desktop (and search for renamed version if fail)
super + ctrl + {q,w,e,r,t,y,u,i,o,p}
	x={q,w,e,r,t,y,u,i,o,p}; \
	bspc node -d "$x" --follow || bspc node -d "$(bspc query -D --names | grep -m 1 "^$x·")" --follow

# focus/send a window to any desktop (dmenu)
super + {_,shift +,ctrl +} a
	bspwm_any_desktop {focus,move,follow}

# rename desktop (remove if blank)
super + c
	bspwm_rename_desktop

# node state (tiled, pseudo_tiled, floating, fullscreen)
super + s ; {t,p,s,f}
	bspc node -t ~{tiled,pseudo_tiled,floating,fullscreen}

# node flags (marked, locked, sticky, private)
super + f ; {m,l,s,p}
	bspc node -g {marked,locked,sticky,private}

# close focused window
super + d
	bspc node -c

# alternate between the tiled and monocle layout
super + m
	bspc desktop -l next

# send the focused node to the newest preselected area
super + n
	bspc node -n newest.!automatic

# focus the biggest node, or the last focused if current is biggest
super + g
	[ "$(bspc query -N -n)" != "$(bspc query -N -n biggest.local)" ] && bspc node -f biggest.local || \
    bspc node -f last.leaf.local || bspc node -f any.leaf.!focused.local

# swap the current node and the biggest node, or the last focused if current is biggest
super + shift + g
	bspc node -s biggest.local || bspc node -s last.leaf.local || bspc node -s any.leaf.!focused.local

# focus dir node (or just go to next/prev node if node doesn't exist)
super + {j,l}
	bspc node -f {south,east} || bspc node -f next.leaf.local
super + {k,h}
	bspc node -f {north,west} || bspc node -f prev.leaf.local

# swap dir node (or just swap next/prev node if node doesn't exist)
super + shift + {j,l}
	bspc node -s {south,east} || bspc node -s next.leaf.local
super + shift + {k,h}
	bspc node -s {north,west} || bspc node -s prev.leaf.local

# focus the node for the given path jump
super + {v,b,comma,period,shift + v}
	bspc node -f @{parent,brother,first,second,/}

# balance selected nodes
super + ctrl + b
	bspc node -B

# circulate desktop (holding ctrl does it just for focused subtree)
super + {_,ctrl +} {_,shift +} z
	bspc node {@/,_} -C {forward,backward}

# focus the next/previous desktop in the current monitor
super + {_,shift +} bracket{left,right}
	bspc {desktop -f, node -d} {prev,next}.local.occupied
{_,shift +} button{6,7}
	bspc {desktop -f, node -d} {prev,next}.local.occupied

# activate the next/previous desktop in the non-focused monitor (keeps focus on current monitor)
super + ctrl + bracket{left,right}
	bspc desktop -a {prev,next}.!local.occupied
ctrl + button{6,7}
	bspc desktop -a {prev,next}.!local.occupied

# focus the last node/desktop
super + {_,shift +} Tab
	bspc {node,desktop} -f last

# preselect the direction
super + ctrl + {h,j,k,l}
	bspc node -p ~{west,south,north,east}

# preselect the ratio
super + ctrl + {1-9}
	bspc node -o 0.{1-9}

# cancel the preselection for the focused desktop
super + ctrl + BackSpace
	bspc query -N -d | xargs -I id -n 1 bspc node id -p cancel

# resize borders (wrapper around normal bspc resize window commands)
super + alt + {h,j,k,l}
	bspwm_move_borders {west,south,north,east} 30

# move a floating window
super + alt + {a,s,d,f}
	bspc node -v {-30 0, 0 30, 0 -30, 30 0}
